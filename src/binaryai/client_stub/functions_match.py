# Generated by ariadne-codegen
# Source: ./src/binaryai/query.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import MatchAlgorithm


class FunctionsMatch(BaseModel):
    file: Optional["FunctionsMatchFile"]


class FunctionsMatchFile(BaseModel):
    decompile_result: Optional["FunctionsMatchFileDecompileResult"] = Field(
        alias="decompileResult"
    )


class FunctionsMatchFileDecompileResult(BaseModel):
    functions: Optional[List["FunctionsMatchFileDecompileResultFunctions"]]


class FunctionsMatchFileDecompileResultFunctions(BaseModel):
    offset: Any
    name: str
    pseudo_code: Optional["FunctionsMatchFileDecompileResultFunctionsPseudoCode"] = (
        Field(alias="pseudoCode")
    )
    match: Optional[List["FunctionsMatchFileDecompileResultFunctionsMatch"]]


class FunctionsMatchFileDecompileResultFunctionsPseudoCode(BaseModel):
    code: str


class FunctionsMatchFileDecompileResultFunctionsMatch(BaseModel):
    score: float
    function: "FunctionsMatchFileDecompileResultFunctionsMatchFunction"
    algorithm: MatchAlgorithm


class FunctionsMatchFileDecompileResultFunctionsMatchFunction(BaseModel):
    function_name: str = Field(alias="functionName")
    function_url: Optional[str] = Field(alias="functionURL")


FunctionsMatch.model_rebuild()
FunctionsMatchFile.model_rebuild()
FunctionsMatchFileDecompileResult.model_rebuild()
FunctionsMatchFileDecompileResultFunctions.model_rebuild()
FunctionsMatchFileDecompileResultFunctionsMatch.model_rebuild()
